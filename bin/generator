#!/usr/bin/env node

/* vim: set filetype=javascript : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

process.env.PROCESS_TYPE = 'apk-generator';
// TODO Bug#973259
process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

var fs = require('fs');

var express = require('express');
var hawk = require('hawk');

var raven = require('raven');

var argv = require('../lib/cli_common_argv');
var config = require('../lib/config');
config.init(argv);

var apkSystem = require('../lib/apk_system');
var ApkGenerator = require('../lib/apk_generator').ApkGenerator;
var buildLimit = require('../lib/build_limit');
var logError = require('../lib/log_error');
var metrics = require('../lib/metrics');

var BLOB_TYPE = require('../lib/apk_generator').BLOB_TYPE;
var S3_TYPE = require('../lib/apk_generator').S3_TYPE;

config.withConfig(function(config) {
  var log = require('../lib/logging')(config);
  process.on('uncaughtException', function(err) {
    logError(log, 'Generator Uncaught exception:', err);
  });
  var generator = new ApkGenerator(config.buildDir,
    config.keysDir,
    config.force,
    config.debug);

  var app = express();

  app.use(express.bodyParser());

  function withHawk(req, res, next, onAuthZ) {
    var port = config.hawkPublicServerPort;
    hawk.server.authenticate(req, function(id, cb) {
      log.info('incoming Hawk request for ' + id + ' using port=' + port);
      cb(null, config.hawk);
    }, {
      port: port
    }, function(err, credentials, artifacts) {
      credentials = credentials || {};
      if (err) {
        logError(log, 'Bad hawk credentials for id=' + credentials.id, err);

        log.debug('Failed Hawk artifacts; id=' + credentials.id + ' artifacts=',
          artifacts);
        log.info('Approximate Hawk local time in seconds: ' +
          hawk.utils.now() / 1000);
        res.send('Access denied', 401);
        return;
      }
      onAuthZ(req, res, next);
    });
  }

  app.use(raven.middleware.express(config.sentryDSN));

  app.use(function(req, res, next) {
    var start = new Date();
    if ('/build' === req.path) {
      withHawk(req, res, next, function(req, res) {
        var post = req.body;

        if (!post.manifest.url) throw new Error('missing url');
        try {
          buildLimit.start(res, function() {
            generator.generate(post.manifest, post.zip, post.loadDir,
              genCb(res, config, post.manifest.url, start, log));
          }, config);
        } catch (e) {
          buildLimit.error();
          _reportCatch(res, post.manifest.url, e);
        }
      });
    } else if ('/system/signer' === req.path) {
      apkSystem.signer(req, res, log);
    } else if ('/system/authz' === req.path) {
      withHawk(req, res, next, apkSystem.authz);

    } else if ('/' === req.path) {
      res.status(200);
      res.type("text/text");
      res.send("200 Server OK");
    } else {
      log.info('Huh. No route for ' + req.path);
      next();
    }
  });

  function _reportCatch(res, url, e) {
    logError(log, 'Generator exception during ' + url, e);
    res.type("text/plain");
    res.send(500, 'Unknown Server Error');
    metrics.buildingApkFailed(url);
  }

  process.stdout.write('listening on ', config.generator_server_port);
  app.listen(config.generator_server_port,
    config.bind_address,
    function() {
      metrics.serverStarted('generator');
      log.info("generator running on " + config.bind_address + ":" +
        config.generator_server_port);
    });
});

function genCb(res, config, manifesturl, start, log) {
  return function(err, apkFileLocation, cleanupFn) {
    var locationType;
    res.set('Content-Type', 'application/json');
    if (err) {
      buildLimit.error();
      logError(log, 'generate failed', err);
      metrics.buildingApkFailed(manifesturl);
      res.send({
        status: "error",
        message: err
      });
    } else {
      buildLimit.finished();
      log.info('Generation of APK complete [' + manifesturl + '] streaming back');
      metrics.buildingApkFinished(manifesturl, new Date() - start);
      var resBody = {
        status: "okay",
        locationType: locationType,
      };

      // Be explicit to detect deployment bugs
      if ('release' === config.environment) {
        resBody.locationType = S3_TYPE;
        resBody.apkFileLocation = apkFileLocation;
        res.send(resBody);
        cleanupFn();
      } else {
        fs.readFile(apkFileLocation, {
          encoding: 'binary'
        }, function(err, data) {
          if (err) {
            logError(log, 'Problem reading apk from ' + apkFileLocation, err);
            return res.send({
              status: "error",
              message: err
            });
          }
          resBody.locationType = BLOB_TYPE;
          resBody.blob = new Buffer(data, 'binary').toString('base64');
          res.send(JSON.stringify(resBody));
          // Must be called after we readFile for the apkLocation
          cleanupFn();
        });
      }

    }
  };
}

#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

process.env.PROCESS_TYPE = 'apk-generator';

var express = require('express');
var hawk = require('hawk');
var toobusy = require('../lib/busy_middleware.js');

var ApkGenerator = require('../lib/apk_generator').ApkGenerator;
var metrics = require('../lib/metrics');
var withConfig = require('../lib/config');

withConfig(function(config) {
  var log = require('../lib/logging')(config);
  var generator = new ApkGenerator(config.buildDir,
                                   config.keysDir,
                                   config.force,
                                   config.debug);

  var app = express();

  // Send 5xx if server is overloaded
  app.use(toobusy);

  app.use(express.bodyParser());

  app.use(function(req, res, next) {
    if ('/build' === req.path) {
      hawk.server.authenticate(req, function(id, cb) {
        cb(null, config.hawk);
      }, {}, function(err) {
        if(err) {
          console.log('Bad hawk credentails');
          console.error(err);
          res.send('Access denied', 401);
          return;
        }
        var post = req.body;

        if (! post.manifest.url) throw new Error('missing url');
        generator.generate(post.manifest, post.zip, post.loadDir, genCb(res));
      });
    } else {
      console.log('Huh', req);
      next();
    }
  });

  console.log('listinging on ', config.generator_server_port);
  app.listen(config.generator_server_port,
             config.bind_address,
             function() {
                metrics.serverStarted('generator');
                log.info("generator running on " + config.bind_address + ":" +
                        config.generator_server_port);
              });
});

function genCb(res) {
  return function (err, zipFileLocation) {
    res.set('Content-Type', 'application/json');
    if (err) {
      res.send({
        status: "error",
        message: err
      });
    } else {
      res.send({
        status: "okay",
        zipFileLocation: zipFileLocation
      });
    }        
  };
}
#!/usr/bin/env node

/* vim: set filetype=javascript : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

process.env.PROCESS_TYPE = 'apk-controller';
// TODO Bug#973259
process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

var express = require('express');
var hawk = require('hawk');
var raven = require('raven');
var request = require('request');
var toobusy = require('../lib/busy_middleware.js');

var argv = require('../lib/cli_common_argv');
var config = require('../lib/config');
config.init(argv);

var admin = require('../lib/admin');
var apkUpdates = require('../lib/apk_updates');
var cliDevBuild = require('../lib/cli_dev_build');
var frontController = require('../lib/front_controller');
var logError = require('../lib/log_error');
var metrics = require('../lib/metrics');
var s3Check = require('../lib/s3_check');


config.withConfig(function(config) {
  var log = require('../lib/logging')(config);
  process.on('uncaughtException', function (err) {
    logError(log, 'Controller Uncaught exception', err);
  });
  var app = express();

  // Send 5xx if server is overloaded
  app.use(toobusy);

  app.use(express.bodyParser());

  app.use(raven.middleware.express(config.sentryDSN));

  app.get('/application.apk', function(req, res) {
    var start = new Date();

    var manifestUrl = req.query.manifestUrl;
    var appType = req.query.appType || "hosted";

    if (!manifestUrl) {
      metrics.badManifestUrl(manifestUrl);
      res.send("A manifestUrl param is needed", 400);
      return;
    }

    metrics.generateApkRequest(manifestUrl);

    try {
      frontController(manifestUrl, appType, config, function(err, s3res, isStream) {
        if (err) {
          return _genApkFailed(res, err);
        }
        res.type("application/vnd.android.package-archive");
        res.status(200);

        isStream = isStream || false;

        if (isStream) {
          res.send(s3res);
          metrics.generationApkFinished(new Date() - start);        
        } else {
          s3res.on('data', function(chunk) {
            res.write(chunk);
          });
          s3res.on('end', function() {
            res.send();
            metrics.generationApkFinished(new Date() - start);
          });
        }
      });
    } catch (e) {
      _reportCatch(res, manifestUrl, e);
    }
  });

  function _genApkFailed(res, err) {
    logError(log, 'gen Apk Failed', err);
    res.type("text/plain");
    res.send(400, err);
    metrics.generationApkFailed();
  }

  function _reportCatch(res, url, e) {
      logError(log, 'Controller Exception during ' + url, e);
      res.type("text/plain");
      res.send(500, 'Unknown Server Error');
      metrics.generationApkFailed();
    }

  app.post('/app_updates', function(req, res) {
    var start = new Date();
    metrics.appUpdatesRequest();
    try {
      apkUpdates(req.body, config, function(err, outdated) {
        // Partial failures are okay (?)
        if (err) {
          metrics.appUpdatesFailed();
        }
        res.set('Content-Type', 'application/json');
        res.send(JSON.stringify({
          outdated: outdated
        }));
        metrics.appUpdatesFinished(new Date() - start);
      });
    } catch (e) {
      _reportCatch(res, '/app_updates', e);
    }
  });

  if (['development', 'review'].indexOf(config.environment) !== -1) {
    app.post('/cli_build', function(req, res) {
      var start = new Date();
      cliDevBuild(req.body, config, function(err, s3resOrBlob, isBase64Stream) {
        var status = 'okay';
        var msg = '';
        var bApk = null;
        if (err) {
          status = 'error';
          msg = err;
          logError(log, 'cliDevBuild failed', err);
        } else {

          isBase64Stream = isBase64Stream || false;


          res.type("application/vnd.android.package-archive");
          res.status(200);

          if (isBase64Stream) {
            res.set('Content-Type', 'application/json');
            res.send(JSON.stringify({
              status: status,
              apk: s3resOrBlob,
              message: msg
            }));
            metrics.generationApkFinished(new Date() - start);        
          } else {
            var buf = [];
            s3resOrBlob.on('data', function(chunk) {
              buf.push(chunk);
            });
            s3resOrBlob.on('end', function() {
              bApk = Buffer.concat(buf).toString('base64');
              res.set('Content-Type', 'application/json');
              res.send(JSON.stringify({
                status: status,
                apk: bApk,
                message: msg
              }));
              metrics.generationApkFinished(new Date() - start);
            });
          }
        }
      });
    });
  }

  app.get("/", function(req, res) {
    res.status(200);
    res.type("text/text");
    res.send("200 Server OK");
  });

  app.get('/system/generator', function(req, res) {
    request({
      url: config.generator_endpoint + '/system/authz',
      method: 'GET',
      hawk: {
        credentials: config.hawk
      }
    }, function(err, reqRes, body) {
      if (err || 200 !== reqRes.statusCode) {
        res.send(err || 'Generator response status code was ' + reqRes.statusCode, 409);
      } else {
        res.send(JSON.parse(body), 203);
      }
    });
  });

  app.get('/system/s3', function(req, res) {
    s3Check(function(err) {
      if (err) {
        console.log('err', err);
        res.send(err, 409);
      } else {
        res.send({
          "msg": "S3 Access Successful"
        }, 203);
      }
    });
  });

  app.post('/admin', function(req, res) {
    var port = config.hawkPublicControllerServerPort;
    hawk.server.authenticate(req, function(id, cb) {
      log.info('incoming Hawk request for ' + id);
      cb(null, config.adminHawk);
    }, {port: port}, function(err, credentials, artifacts) {
      credentials = credentials || {};
      if(err) {
        logError(log, 'Bad hawk credentials for id=' + credentials.id, err);
        log.debug('Failed Hawk artifacts; id=' + credentials.id + ' artifacts=',
           artifacts);
        log.info('Approximate Hawk local time in seconds: ' +
                    hawk.utils.now() / 1000);
        res.send('Access denied', 401);
        return;
      }
      admin(req, res, config);
    });
  });

  process.stdout.write('listening on ', config.controller_server_port);

  app.listen(config.controller_server_port,
    config.bind_address,
    function() {
      metrics.serverStarted('controller');
      log.info("controller running on " + config.bind_address + ":" +
        config.controller_server_port);
      log.info("talking to " + config.generator_endpoint);
    });
});

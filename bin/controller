#!/usr/bin/env node
/* vim: set filetype=javascript : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

process.env.PROCESS_TYPE = 'apk-controller';
// TODO Bug#973259
process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

var express = require('express');
var toobusy = require('../lib/busy_middleware.js');

var argv = require('../lib/cli_common_argv');
var config = require('../lib/config');
config.init(argv);

var apkUpdates = require('../lib/apk_updates');
var cliDevBuild = require('../lib/cli_dev_build');
var frontController = require('../lib/front_controller');
var metrics = require('../lib/metrics');


config.withConfig(function(config) {
  var log = require('../lib/logging')(config);
  var app = express();

  // Send 5xx if server is overloaded
  app.use(toobusy);

  app.use(express.bodyParser());

  app.get('/application.apk', function(req, res) {
    var start = new Date();

    var manifestUrl = req.query.manifestUrl;
    var appType = req.query.appType || "hosted";

    if (!manifestUrl) {
      metrics.badManifestUrl();
      res.send("A manifestUrl param is needed", 400);
      return;
    }

    metrics.generateApkRequest(manifestUrl);

    frontController(manifestUrl, appType, config, function(err, apk) {
      if (err) {
        console.log(err);
        res.type("text/plain");
        res.send(400, err.toString());
        metrics.generationApkFailed();
        return;
      }
      res.type("application/vnd.android.package-archive");
      res.status(200);
      res.send(apk.Body);
      metrics.generationApkFinished(new Date() - start);
    });
  });

  app.post('/app_updates', function(req, res) {
    var start = new Date();
    apkUpdates(req.body, config, function(err, outdated) {
      res.set('Content-Type', 'application/json');
      res.send(JSON.stringify({
        outdated: outdated
      }));
      metrics.generationApkFinished(new Date() - start);
    });
  });

  if (['development', 'review'].indexOf(config.environment) !== -1) {
    app.post('/cli_build', function(req, res) {
      cliDevBuild(req.body, config, function(err, cliRes, apk) {
        var status = 'okay';
        var msg = '';
        var bApk = null;
        if (err) {
          status = 'error';
          msg = err;
        } else if (200 !== cliRes.statusCode) {
          status = 'error';
          msg = 'Failed to get S3 url';
        } else {
          bApk = new Buffer(apk, 'binary').toString('base64');
        }
        res.set('Content-Type', 'application/json');
        res.send(JSON.stringify({
          status: status,
          apk: bApk,
          message: msg
        }));
      });
    });
  }

  app.get("/", function(req, res) {
    res.status(200);
    res.type("text/text");
    res.send("200 Server OK");
  });

  console.log('listening on ', config.controller_server_port);
  app.listen(config.controller_server_port,
             config.bind_address,
             function() {
                metrics.serverStarted('controller');
                log.info("controller running on " + config.bind_address + ":" +
                         config.controller_server_port);
                log.info("talking to " + config.generator_endpoint);
              });
});
